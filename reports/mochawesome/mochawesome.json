{
  "stats": {
    "suites": 2,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2020-10-16T00:07:42.013Z",
    "end": "2020-10-16T00:07:42.976Z",
    "duration": 963,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b47ff604-0467-4457-8e92-bcb9a59e3880",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "31e1d869-081e-4bd5-8c92-b4fd07c03e1a",
          "title": "Post List",
          "fullFile": "/Applications/Projects/playground/mocha-chai/api/test/get-post.js",
          "file": "/api/test/get-post.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "@get As a User, I want to be able to get Post list",
              "fullTitle": "Post List @get As a User, I want to be able to get Post list",
              "timedOut": false,
              "duration": 154,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await page.getPost();\nassert(response.status).to.equal(200);",
              "err": {},
              "uuid": "429fd2f3-65ac-44d4-b6f2-f3fdb5bc0be4",
              "parentUUID": "31e1d869-081e-4bd5-8c92-b4fd07c03e1a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@get As a User, I want to be get post data with correct data type",
              "fullTitle": "Post List @get As a User, I want to be get post data with correct data type",
              "timedOut": false,
              "duration": 152,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let isCorrectDataType = true;\nconst response = await page.getPost();\nconst data = response.body;\ndata.map((item, index) => {\n  assert(typeof item.userId).to.equal(\"number\");\n  assert(typeof item.id).to.equal(\"number\");\n  assert(typeof item.title).to.equal(\"string\");\n  assert(typeof item.body).to.equal(\"string\");\n});",
              "err": {},
              "uuid": "936b267a-5e5a-4dde-9caf-66b7d97fc57c",
              "parentUUID": "31e1d869-081e-4bd5-8c92-b4fd07c03e1a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "429fd2f3-65ac-44d4-b6f2-f3fdb5bc0be4",
            "936b267a-5e5a-4dde-9caf-66b7d97fc57c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 306,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "f15d0216-5abc-42dc-9fda-44c0df7d9246",
          "title": "Post List",
          "fullFile": "/Applications/Projects/playground/mocha-chai/api/test/post-post.js",
          "file": "/api/test/post-post.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "@post As a User, I want to get response with same data type after post",
              "fullTitle": "Post List @post As a User, I want to get response with same data type after post",
              "timedOut": false,
              "duration": 651,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data = {\n  title: \"recomendation\",\n  body: \"motorcycle\",\n  userId: 12,\n};\nconst response = await page.postPost(data);\nassert(typeof response.body.title).to.equal(typeof data.title);\nassert(typeof response.body.body).to.equal(typeof data.body);\nassert(typeof response.body.userId).to.equal(typeof data.userId);",
              "err": {},
              "uuid": "c957c92a-bc1f-41e0-8661-ecc1c84a4c59",
              "parentUUID": "f15d0216-5abc-42dc-9fda-44c0df7d9246",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c957c92a-bc1f-41e0-8661-ecc1c84a4c59"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 651,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 180000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mochawesome/"
      },
      "version": "5.1.0"
    }
  }
}